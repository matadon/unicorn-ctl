#!/usr/bin/env ruby

require 'rubygems'
require 'fileutils'
require 'shellwords'
require 'getoptlong'
require 'httparty'

#---------------------------------------------------------------------------------------------------
bin_dir = File.dirname(__FILE__)
root_dir = File.join(bin_dir, '..')
lib_dir = File.join(root_dir, 'lib')

$LOAD_PATH.push(lib_dir)
require 'unicorn_ctl/version'

#---------------------------------------------------------------------------------------------------
VALID_COMMANDS = %w[
  start
  stop
  force-stop
  restart
  force-restart
  upgrade
  reopen-logs
  status
]

#---------------------------------------------------------------------------------------------------
# Make sure our console output is synchronous
STDOUT.sync = true
STDERR.sync = true

# Trap interrupts to quit cleanly. See
# https://twitter.com/mitchellh/status/283014103189053442
Signal.trap("INT") { exit 1 }

#---------------------------------------------------------------------------------------------------
def app_file_path(app_dir, config_name)
  return config_name if config_name =~ /^\//
  return File.join(app_dir, config_name)
end

def unicorn_pid_file(options)
  if options[:pid_file]
    app_file_path(options[:app_dir], options[:pid_file])
  else
    File.join(options[:app_dir], 'shared', 'pids', "#{options[:unicorn_bin]}.pid")
  end
end

def unicorn_config_file(options)
  if options[:unicorn_config]
    app_file_path(options[:app_dir], options[:unicorn_config])
  else
    File.join(options[:app_dir], 'shared', "#{options[:unicorn_bin]}.rb")
  end
end

def rackup_config_file(options)
  if options[:rackup_config]
    app_file_path(options[:app_dir], options[:rackup_config])
  else
    File.join(options[:app_dir], 'config.ru')
  end
end

def escape(param)
  Shellwords.escape(param)
end

def wait_with_timeout(timeout, sleep_time = 1, &block)
  raise "No block given" unless block_given?
  start_time = Time.now
  while Time.now - start_time < timeout do
    block.call
    sleep(sleep_time)
  end
end

#---------------------------------------------------------------------------------------------------
# Check if process is still running
def pid_running?(pid)
  # Make sure PID is correct
  pid = pid.to_i
  return false if pid <= 0

  # Check if the process exists
  Process.kill(0, pid)
  return true

rescue Errno::ESRCH  # Process does not exist
  return false

rescue ::Exception   # for example on EPERM (process exists but does not belong to us)
  return true
end

def send_signal(signal, pid)
  Process.kill(signal, pid)
rescue => e
  puts "WARNING: Failed to send signal #{signal} to #{pid}: #{e}"
end

def read_pid(pid_file)
  File.read(pid_file).strip.to_i
end

def wait_for_pid_to_die(pid, timeout)
  print "Waiting for the process to stop: "
  wait_with_timeout(timeout) do
    print "."
    break unless pid_running?(pid)
  end
end

def stop_unicorn_process(pid, timeout, graceful)
  signal = graceful ? 'QUIT' : 'TERM'
  puts "Sending #{signal} signal to process with pid=#{pid}..."
  send_signal(signal, pid)

  wait_for_pid_to_die(pid, timeout)

  if pid_running?(pid)
    puts " Failed to stop, killing!"
    kill_tree(pid)
  else
    puts " Done!"
  end
end

def process_title(pid)
  return nil unless pid_running?(pid)
  cmdline_file = "/proc/#{pid}/cmdline"
  return nil unless File.readable?(cmdline_file)
  return File.read(cmdline_file).strip
end

#---------------------------------------------------------------------------------------------------
# Kills a process and all of its descendants
def kill_tree(pid)
  # FIXME: Implrement a real killtree
  send_signal(9, pid)
end

#---------------------------------------------------------------------------------------------------
# Performs a health check on an http endpoint
def check_app_health(options)
  puts "Checking service health with URL: #{options[:check_url]}"

  start_time = Time.now
  while Time.now - start_time < options[:timeout]
    sleep(1)

    response = begin
      HTTParty.get(options[:check_url], :timeout => options[:check_timeout], :no_follow => true)
    rescue Timeout::Error => e
      puts "Health check timed out after #{options[:check_timeout]} seconds. Retrying..."
      next
    end

    code = response.code.to_i
    if 100 <= code && code < 400
      puts "Health check succeeded with code: #{code}"
      if options[:check_content]
        if response.body.match(options[:check_content])
          puts "Content check succeeded, found content in response body: #{options[:check_content]}"
          return true
        else
          puts "ERROR: Could not find content in response body: #{options[:check_content]}. Retrying."
          next
        end
      end
      return true
    end

    puts "Health check failed with status #{response.code}. Retrying..."
  end

  puts "ERROR: Health check has been failing for #{Time.now - start_time} seconds, giving up now!"
  return false
end

#---------------------------------------------------------------------------------------------------
def start_application!(options)
  # Check pid file
  pid_file = unicorn_pid_file(options)
  if File.exists?(pid_file)
    pid = read_pid(pid_file)

    if pid_running?(pid)
      puts "OK: The app is already running"

      # If we have a health check url, let's check it
      if options[:check_url]
        exit(1) unless check_app_health(options)
      end

      # Done
      exit(0)
    else
      puts "WARNING: Stale pid file found, removing it: #{pid_file}"
      FileUtils.rm(pid_file)
    end
  end

  # Get unicorn config
  unicorn_config = unicorn_config_file(options)
  unless File.readable?(unicorn_config)
    puts "ERROR: Could not find unicorn config: #{unicorn_config}"
    exit(1)
  end

  # Get rackup config
  rackup_config = rackup_config_file(options)
  unless File.readable?(rackup_config)
    puts "ERROR: Could not find rackup config: #{rackup_config}"
    exit(1)
  end

  # Compose unicorn startup command
  command = "cd #{escape options[:app_dir]} && #{options[:bundle_command]} exec #{options[:unicorn_bin]} " <<
            "--env #{escape options[:env]} --daemonize --config-file #{escape unicorn_config} "
            "#{escape rackup_config}"

  # Run startup command
  puts "Starting unicorn..."
  res = system(command)
  unless res
    puts "ERROR: Failed to start unicorn command: #{command}"
    exit(1)
  end

  # Wait for a few seconds...
  sleep(2)

  # Check pid file
  unless File.exists?(pid_file)
    puts "ERROR: Even though startup command succeeded, there is no pid file: #{pid_file}"
    exit(1)
  end

  # Check to make sure the process exists
  pid = File.read(pid_file).strip
  unless pid_running?(pid)
    puts "ERROR: Even though startup command succeeded and pid file exists, there is no process with pid=#{pid}"
    exit(1)
  end

  # Wait for a while to let the new master start
  if options[:start_wait] > 0
    puts "Waiting for #{options[:start_wait]} seconds to let the new master load completely..."
    sleep(options[:start_wait])
  end

  # If we have a health check url, let's check it
  if options[:check_url]
    exit(1) unless check_app_health(options)
  end

  # Ok, we're good
  puts "Started! PID=#{pid}"
  exit(0)
end

#---------------------------------------------------------------------------------------------------
def stop_application!(options, graceful = false)
  # Check pid file
  pid_file = unicorn_pid_file(options)
  unless File.exists?(pid_file)
    puts "OK: The process is not running"
    exit(0)
  end

  pid = read_pid(pid_file)
  if pid_running?(pid)
    stop_unicorn_process(pid, options[:timeout], graceful)
  else
    puts "WARNING: Stale pid file found, removing it: #{pid_file}"
    FileUtils.rm(pid_file)
  end

  puts "Stopped!"
  exit(0)
end

#---------------------------------------------------------------------------------------------------
def restart_application!(options, graceful)
  # Check if the app is running and stop it if needed
  pid_file = unicorn_pid_file(options)
  if File.exists?(pid_file)
    pid = read_pid(pid_file)
    if pid_running?(pid)
      stop_unicorn_process(pid, options[:timeout], graceful)
    else
      puts "WARNING: Stale pid file found, removing it: #{pid_file}"
      FileUtils.rm(pid_file)
    end

    puts "Stopped!"
  else
    puts "The process is not running"
  end

  # Start the app
  start_application!(options)
end

#---------------------------------------------------------------------------------------------------
def upgrade_application!(options)
  pid_file = unicorn_pid_file(options)
  old_pid_file = unicorn_pid_file(options) + '.oldbin'

  # Make sure there is no old pid file (which we could have if an upgrade failed mid-way)
  if File.exists?(old_pid_file)
    puts "WARNING: Old pid file exists: #{old_pid_file}"

    pid = read_pid(old_pid_file)
    if pid_running?(pid)
      puts "WARNING: Old binary is still running, shutting it down"
      stop_unicorn_process(pid, options[:timeout], false)
    else
      puts "WARNING: Removing stale pid file: #{old_pid_file}"
      FileUtils.rm(old_pid_file)
    end
  end

  # Now let's see if the app is actually running
  unless File.exists?(pid_file)
    puts "WARNING: No pid file found: #{pid_file}. Trying to do a cold startup procedure..."
    start_application!(options)
  end

  # Get current pid and check if it is up
  old_pid = read_pid(pid_file)

  # If the app is down, just do a normal cold startup procedure
  unless pid_running?(old_pid)
    puts "WARNING: Stale pid file found: #{pid_file}. Trying to do a cold startup procedure..."
    start_application!(options)
  end

  # The app is running, let's try to do the upgrade:
  # Ask old master to start a new binary and move itself into the old state
  puts "Sending USR2 signal to old master: #{old_pid}..."
  send_signal('USR2', old_pid)

  puts "Waiting for the new master to replace the old one..."

  # Wait for the new master to start
  new_started = false
  wait_with_timeout(options[:timeout]) do
    new_pid = File.exists?(pid_file) ? read_pid(pid_file) : nil
    if new_pid && new_pid != old_pid
      new_started = true
      break
    end
  end

  # If we failed to see the new master started, let's try to do a cold restart
  unless new_started
    puts "WARNING: New master didn't start in #{options[:timeout]} seconds, trying to do a cold restart..."
    stop_unicorn_process(old_pid, options[:timeout], false)
    start_application!(options)
  end

  # We have the new master
  new_pid = read_pid(pid_file)
  puts "New master detected with pid=#{new_pid}"

  # Just in case we were asked to watch master proctitle, save its current content
  master_proctitle = process_title(new_pid)
  if options[:watch_proctitle]
    puts "New master process #{new_pid} title: #{master_proctitle}"
  end

  # Wait for a while to let the new master start
  if options[:start_wait] > 0
    puts "Waiting for #{options[:start_wait]} seconds to let the new master load completely..."
    sleep(options[:start_wait])
  end

  # If we're asked to watch proctitle, let's wait for the title to change
  if options[:watch_proctitle]
    puts "Waiting for process title to change for master process #{new_pid}..."
    wait_with_timeout(options[:timeout]) do
      cur_title = process_title(new_pid)
      if master_proctitle != cur_title
        puts "Master process #{new_pid} new title: #{cur_title}"
        break
      end
    end
  end

  # If we have a health check url, let's check it
  if options[:check_url]
    if check_app_health(options)
      puts "Health check succeeded on the new master!"
    else
      puts "ERROR: Failed to verify health of the new master, nuking everything and trying a cold start..."
      stop_unicorn_process(new_pid, 1, false)
      stop_unicorn_process(old_pid, 1, false)
      start_application!(options)
    end
  end

  # Now let's shut down the old master
  puts "Stopping old unicorn master: #{old_pid}"
  stop_unicorn_process(old_pid, options[:timeout], true)

  # If we have a health check url, let's pefrorm the final check
  if options[:check_url]
    puts "Performing the final health check..."
    unless check_app_health(options)
      puts "ERROR: Final health check failed!"
      exit(1)
    end
  end

  # All done!
  puts "OK: Upgrade is done successfully!"
end

#---------------------------------------------------------------------------------------------------
def reopen_logs!(options)
  # Check pid file
  pid_file = unicorn_pid_file(options)
  unless File.exists?(pid_file)
    puts "OK: The process is not running"
    exit(0)
  end

  pid = read_pid(pid_file)
  if pid_running?(pid)
    puts "Sending USR1 signal to process with pid=#{pid}..."
    send_signal('USR1', pid)
  else
    puts "WARNING: Stale pid file found, removing it: #{pid_file}"
    FileUtils.rm(pid_file)
  end

  puts "Done!"
  exit(0)
end

#---------------------------------------------------------------------------------------------------
def status!(options)
  # Check pid file
  pid_file = unicorn_pid_file(options)
  unless File.exists?(pid_file)
    puts "No pid file found, the app is not running"
    exit(1)
  end

  # Check the process
  pid = read_pid(pid_file)
  if pid_running?(pid)
    puts "The app is running, pid=#{pid}..."
    exit(0)
  else
    puts "Stale pid file found, the app is not running"
    exit(1)
  end
end

#---------------------------------------------------------------------------------------------------
def show_version
  puts
  puts "unicorn-ctl version #{UnicornCtl::Version::STRING}"
  puts
  exit(0)
end

#---------------------------------------------------------------------------------------------------
def show_help(error = nil)
  puts "ERROR: #{error}\n\n" if error

  puts "Usage: #{$0} [options] <command>"
  puts "Valid commands: #{VALID_COMMANDS.join(', ')}"
  puts 'Options:'
  puts '  --app-dir=dir                  | -d dir     Base directory for the application (required)'
  puts '  --environment=name             | -e name    RACK_ENV to use for the app (default: development)'
  puts '  --health-check-url=url         | -H url     Health check URL used to make sure the app has started'
  puts '  --health-check-content=string  | -C string  Health check expected content (default: just check for HTTP 1xx/2xx/3xx)'
  puts '  --health-check-timeout=sec     | -T sec     Individual health check timeout (default: 5 sec)'
  puts '  --start-wait=sec               | -w sec     New master startup wait (default: 5 sec, use 0 to disable)'
  puts '  --timeout=sec                  | -t sec     Operation (start/stop/etc) timeout (default: 30 sec)'
  puts '  --bundle-command=cmd           | -b cmd     Command that executes bundler (default: bundle)'
  puts '  --unicorn-config=file          | -c file    Unicorn config file to use, absolute or relative path (default: shared/unicorn.rb)'
  puts '  --rackup-config=file           | -r file    Rackup config file to use, absolute or relative path (default: config.ru)'
  puts '  --pid-file=file                | -p file    PID-file unicorn is configured to use (default: shared/pids/unicorn.pid)'
  puts '  --watch-proctitle              | -W         Watch new master proctitle until it changes, which usually means it has finished loading'
  puts '  --rainbows                     | -R         Use rainbows to start the app (default: use unicorn)'
  puts '  --version                      | -v         Show version'
  puts '  --help                         | -h         This help'
  puts
  exit(error ? 1 : 0)
end

#---------------------------------------------------------------------------------------------------
# Parse options
opts = GetoptLong.new(
  [ '--app-dir',              '-d', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--environment',          '-e', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--health-check-url',     '-U', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--health-check-content', '-C', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--health-check-timeout', '-T', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--start-wait',           '-w', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--timeout',              '-t', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--bundle-command',       '-b', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--unicorn-config',       '-c', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--rackup-config',        '-r', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--pid-file',             '-p', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--watch-proctitle',      '-W', GetoptLong::NO_ARGUMENT ],
  [ '--rainbows',             '-R', GetoptLong::NO_ARGUMENT ],
  [ '--version',              '-v', GetoptLong::NO_ARGUMENT ],
  [ '--help',                 '-h', GetoptLong::NO_ARGUMENT ]
)

# Default settings
options = {
  :app_dir => nil,
  :check_url => nil,
  :check_content => nil,
  :env => 'development',
  :timeout => 30,
  :check_timeout => 5,
  :start_wait => 5,
  :unicorn_bin => 'unicorn',
  :pid_file => nil,
  :rackup_config => nil,
  :unicorn_config => nil,
  :watch_proctitle => false,
  :bundle_command => 'bundle'
}

# Process options
opts.each do |opt, arg|
  case opt
    when "--app-dir"
      options[:app_dir] = arg.strip

    when "--environment"
      options[:env] = arg.strip

    when "--timeout"
      options[:timeout] = arg.to_i

    when "--health-check-url"
      options[:check_url] = arg.strip

    when "--health-check-content"
      options[:check_content] = arg.strip

    when "--health-check-timeout"
      options[:check_timeout] = arg.to_i

    when "--start-wait"
      options[:start_wait] = arg.to_i

    when "--bundle-command"
      options[:bundle_command] = arg.strip

    when "--unicorn-config"
      options[:unicorn_config] = arg.strip

    when "--rackup-config"
      options[:rackup_config] = arg.strip

    when "--pid-file"
      options[:pid_file] = arg.strip

    when "--watch-proctitle"
      # Try to get pid for self
      if process_title(Process.pid)
        options[:watch_proctitle] = true
      else
        puts "WARNING: Proctitle checking is not supported on this platform!"
      end

    when "--rainbows"
      options[:unicorn_bin] = 'rainbows'

    when "--version"
      show_version

    when "--help"
      show_help
  end
end

# Get command
command = ARGV.first

# Make sure we have the command
show_help("Please specify one of valid commands: #{VALID_COMMANDS.join(', ')}") unless command

# Check app directory
show_help("Please specify application directory!") unless options[:app_dir]
show_help("Please specify a valid application directory!") unless File.directory?(options[:app_dir])
options[:app_dir] = File.realpath(options[:app_dir])

#---------------------------------------------------------------------------------------------------
# Run commands
case command
  when 'start'
    start_application!(options)

  when 'stop'
    stop_application!(options, true)

  when 'force-stop'
    stop_application!(options, false)

  when 'restart'
    restart_application!(options, true)

  when 'force-restart'
    restart_application!(options, false)

  when 'upgrade'
    upgrade_application!(options)

  when 'reopen-logs'
    reopen_logs!(options)

  when 'status'
    status!(options)

  else
    show_help("ERROR: Invalid command: #{command}")
end
